class Solution {
public:
    int binarySearch (vector<int> arr, int l, int r)
    {
        int m = -1;
        while (l <= r) {
            m = (l+r)/2;
            if (arr[m] == 1) {
                if (m+1 >= arr.size() || arr[m+1] == 0)
                    return m+1;
                l = m+1;
            }
            else {
                if (m-1 < 0)
                    return 0;
                if (arr[m-1] == 1)
                    return m;
                r = m-1;
            }
        }
        return -1;
    }
    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
        vector<pair<int,int>> ind;
        for (int i=0; i<mat.size(); i++) {
            int lower = 0;
            vector<int> arr = mat[i];
            lower = binarySearch(arr, 0, arr.size()-1);
            ind.push_back({lower,i});
        }
        sort(ind.begin(), ind.end());
        vector<int> res;
        for (int i=0; i<k; i++) {
            int idx = ind[i].second;
            res.push_back(idx);
        }
        return res;
    }
};
